[{"categories":null,"contents":"A system designed to use internet of things (IoT) technology to enable a small weather station in the home garden to report current climate data and predict frosts, alerting the gardener in time for them to cover their plants.\nThe system consists of an IoT endpoint, powered by a microcontroller in a watertight housing connected to a weatherproof temperature and humidity sensor, as well as cloud services configured to collect and analyze weather data, and finally an iOS app for gardeners to monitor the conditions in their gardens and receive push notifications about incoming frosts.\nTo make the system accessible to home gardeners, the design was required to:\n Cost under $200 to construct Measure temperature to within half a degree centigrade Operate at temperatures down to -20ÂºC Support both ethernet and WiFi connections Notify the gardener when a frost is predicted based on the local dew point dropping below freezing Allow the gardener to configure a temperature threshold below which they will always be notified, whether or not the dew point indicates an incoming frost.  The final project utilized:\n An ESP32 microcontroller, coded in C++, for the endpoint An Adafruit ethernet shield for ethernet functionality An SHT31 temperature and humidity sensor Google Cloud services for the cloud data pipeline  IoT Core receives data from the endpoint via MQTT Pub/Sub receives data from IoT Core and verifies schema Cloud Functions triggered by Pub/Sub analyze current climate data, update a Firestore database, and trigger push notifications   Firebase as a serverless backend for the iOS app  Cloud Firestore stores user and endpoint data in a NoSQL database Cloud Messaging sends push notifications to user\u0026rsquo;s phone Firebase Auth for user authentication with the iOS app   Swift for the iOS app  SwiftUI for GUI CocoaPods for dependency management    All design goals were met by the final design except for the low yearly operating cost. This was due to the unexpected requirement of having an Apple Developer account, which costs $99 per year, in order to send push notifications to iOS apps. Due to this unexpectedly high cost, several alternative notification solutions, including an Android app and a secondary physical endpoint with alarm functionality, are proposed at the end of this report, as well as suggestions for potential commercialization.\nFull design report available here.\n  ","permalink":"https://amjames.net/projects/iot-frost-alarm/","tags":["Swift","Google Cloud","Firebase","C++","ESP32"],"title":"IoT Frost Alarm"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n... \u0026#34;contents\u0026#34;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026#34;tags\u0026#34;:{{ .Params.tags | jsonify }}{{end}}, \u0026#34;categories\u0026#34; : {{ .Params.categories | jsonify }}, ... Edit fuse.js options to Search static/js/search.js\nkeys: [ \u0026#34;title\u0026#34;, \u0026#34;contents\u0026#34;, \u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34; ] ","permalink":"https://amjames.net/search/","tags":null,"title":"Search Results"}]